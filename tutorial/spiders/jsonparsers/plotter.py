import plotly.plotly as py
import plotly.graph_objs as go

py.sign_in('slin63', 'c3qo1fycv3')


def plot(stats_dic):  # Currently thread_dic and comment_dic are sorted differently . . . ok
    """Given a dictionary generated by stats_master, connects to plot.ly and
    generates a bar graph representing the frequency of searched key words."""
    new_dic = separate_stats(stats_dic)
    comment_dic = (new_dic[0])
    thread_dic = (new_dic[1])

    data_comments = go.Bar(
                x=['/r/'+key[0] for key in comment_dic],
                y=[count[1][1]/float(count[1][0]) for count in comment_dic],
                name='Comments'
            )
    data_threads = go.Bar(
                x=['/r/'+key[0] for key in comment_dic],
                y=[count[1][1]/float(count[1][0]) for count in thread_dic],
                name='Threads'
            )

    data = [data_comments, data_threads]

    layout = go.Layout(
        barmode='stack',
        title='Percentage of posts containing keywords',
        xaxis=dict(
            title='Subreddit'
        ),
        yaxis=dict(
            title='Percentage'
        )
    )

    fig = go.Figure(data=data, layout=layout)
    py.plot(fig, filename='comment-bar')

    return 0


def separate_stats(stats_dic):  # Just use tuple pairs . . .
    """Splits a dictionary containing thread and comment
    info into two separate list-tuple combinations."""
    comment_dic = []
    thread_dic = []

    for e in stats_dic:
        print e
        if e[-5] == 'C':
            comment_dic.append((e[0:-5], stats_dic[e]))
        elif e[-5] == 'T':
            thread_dic.append((e[0:-5], stats_dic[e]))

    return sorted(comment_dic), sorted(thread_dic)


